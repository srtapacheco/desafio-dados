# -*- coding: utf-8 -*-
"""desafio-dados.ipynb

Automatically generated by Colab.

"""

import pandas as pd
import numpy as np

df = pd.read_csv("dados_ficha_a_desafio.csv")

print("\n" + "="*50)
print("Primeiras 10 Linhas do DataFrame:")
print("="*50)
print(df.head(20))


print("\n" + "="*50)
print("Informações Gerais sobre o DataFrame:")
print("="*50)
print(df.info())

print("\n" + "="*50)
print("Tipos de Dados das Colunas:")
print("="*50)
print(df.dtypes)

print("\n" + "="*50)
print("Estatísticas Descritivas das Colunas Numéricas:")
print("="*50)
print(df.describe())

colunas_datas = ['data_nascimento', 'updated_at', 'data_cadastro', 'data_atualizacao_cadastro']

print("Tipos atuais das colunas de datas:")
for coluna in colunas_datas:
    print(f"{coluna}: {df[coluna].dtype}")


exemplo_paciente = df.iloc[10]

for coluna in ['data_nascimento', 'updated_at', 'data_cadastro', 'data_atualizacao_cadastro']:
    valor = exemplo_paciente[coluna]
    tipo = type(valor)
    comprimento = len(str(valor))

    print(f"{coluna}: '{valor}' - tipo: {tipo}, comprimento: {comprimento}")


exemplo_paciente = df.iloc[1]


for coluna in ['data_nascimento', 'updated_at', 'data_cadastro', 'data_atualizacao_cadastro']:
    valor = exemplo_paciente[coluna]
    tipo = type(valor)
    comprimento = len(str(valor))

    print(f"{coluna}: '{valor}' - tipo: {tipo}, comprimento: {comprimento}")


import pandas as pd

colunas_datas = ['data_nascimento', 'updated_at', 'data_cadastro', 'data_atualizacao_cadastro']


def revelar_formato(data_str):
    import re
    formato = re.sub(r'\d', 'D', data_str)  
    return formato

for coluna in colunas_datas:
    print(f"\nFormatos encontrados na coluna '{coluna}':")

  
    valores_nao_nulos = df[coluna].dropna().astype(str)

  
    formatos_unicos = valores_nao_nulos.apply(revelar_formato).value_counts()

    print(formatos_unicos)


colunas_datas = ['updated_at', 'data_cadastro', 'data_atualizacao_cadastro']

for coluna in colunas_datas:
    datas_zeradas = df[df[coluna].astype(str).str.contains('00:00:00(?:\.000)?', regex=True)]
    qtd_datas_zeradas = len(datas_zeradas)

    print(f"\nColuna '{coluna}' possui {qtd_datas_zeradas} entradas com horário zerado.")
    if qtd_datas_zeradas > 0:
        print("Exemplos encontrados:")
        print(datas_zeradas[['id_paciente', coluna]].head(5))



colunas_ausentes = df.columns[df.isnull().any()]
print("Colunas com valores ausentes e quantidades:")
print(df[colunas_ausentes].isnull().sum())

# Gráfico em barras das colunas com dados ausentes
import matplotlib.pyplot as plt


dados_ausentes = df.isnull().sum()
dados_ausentes = dados_ausentes[dados_ausentes > 0]

# Gráfico
plt.figure(figsize=(12, 6))
dados_ausentes.sort_values().plot(kind='barh')
plt.title('Colunas com Dados Ausentes')
plt.xlabel('Quantidade de Valores Ausentes')
plt.ylabel('Colunas')
plt.grid(axis='x')
plt.show()


# Identificando inconsistências em colunas numéricas
colunas_numericas = df.select_dtypes(include=['float64', 'int64']).columns

# Função para verificar valores não numéricos em colunas numéricas
inconsistencias = {}
for coluna in colunas_numericas:
    inconsistentes = df[~df[coluna].apply(lambda x: isinstance(x, (int, float))) & df[coluna].notnull()]
    if not inconsistentes.empty:
        inconsistencias[coluna] = inconsistentes


if inconsistencias:
    for coluna, casos in inconsistencias.items():
        print(f"Inconsistências encontradas na coluna '{coluna}':")
        print(casos[[coluna]].head())
        print(f"Total de inconsistências: {len(casos)}\n")
else:
    print("Não foram encontradas inconsistências nas colunas numéricas.")



colunas_numericas = df.select_dtypes(include=['int64', 'float64']).columns


for coluna in colunas_numericas:
    negativos = df[df[coluna] < 0]
    qtd_negativos = len(negativos)

    if qtd_negativos > 0:
        print(f"\nColuna '{coluna}' possui {qtd_negativos} valores negativos.")
        print(negativos[['id_paciente', coluna]].head(5))
    else:
        print(f"\nColuna '{coluna}' não possui valores negativos.")


print("\n" + "="*50)
print("Número de Duplicatas:")
print("="*50)
print(df.duplicated().sum())


df['data_nascimento'] = pd.to_datetime(df['data_nascimento'], errors='coerce')
df['updated_at'] = pd.to_datetime(df['updated_at'], errors='coerce')

df_validas = df.dropna(subset=['data_nascimento', 'updated_at']).copy()


df_validas['idade'] = ((df_validas['updated_at'] - df_validas['data_nascimento']).dt.days / 365.25).astype(int)

def faixa_etaria(idade):
    if idade <= 12:
        return 'Criança'
    elif idade <= 60:
        return 'Adulto'
    else:
        return 'Idoso'

df_validas['faixa_etaria'] = df_validas['idade'].apply(faixa_etaria)

# Filtro com base nos intervalos absurdos por faixa etária
casos_absurdos_pressao = df_validas[
    ((df_validas['faixa_etaria'] == 'Criança') &
        ((df_validas['pressao_sistolica'] < 50) | (df_validas['pressao_sistolica'] > 180) |
         (df_validas['pressao_diastolica'] < 30) | (df_validas['pressao_diastolica'] > 120))) |

    ((df_validas['faixa_etaria'] == 'Adulto') &
        ((df_validas['pressao_sistolica'] < 50) | (df_validas['pressao_sistolica'] > 280) |
         (df_validas['pressao_diastolica'] < 30) | (df_validas['pressao_diastolica'] > 160))) |

    ((df_validas['faixa_etaria'] == 'Idoso') &
        ((df_validas['pressao_sistolica'] < 50) | (df_validas['pressao_sistolica'] > 280) |
         (df_validas['pressao_diastolica'] < 30) | (df_validas['pressao_diastolica'] > 160)))
]


print("Exemplos de casos absurdos por faixa etária:")
print(casos_absurdos_pressao[['id_paciente', 'idade', 'faixa_etaria', 'pressao_sistolica', 'pressao_diastolica']].head(10))

print(f"\nTotal de casos absurdos encontrados: {len(casos_absurdos_pressao)}")


# Verificar paciente com exatamente 77 atendimentos
paciente_77 = df[df['n_atendimentos_hospital'] == 77]

print("Dados completos do paciente com 77 atendimentos hospitalares:")
print(paciente_77)

# Filtro com base nos intervalos absurdos por faixa etária
casos_absurdos_peso = df_validas[
    ((df_validas['faixa_etaria'] == 'Criança') &
        ((df_validas['peso'] < 3) | (df_validas['peso'] > 80))) |

    ((df_validas['faixa_etaria'] == 'Adulto') &
        ((df_validas['peso'] < 30) | (df_validas['peso'] > 250))) |

    ((df_validas['faixa_etaria'] == 'Idoso') &
        ((df_validas['peso'] < 30) | (df_validas['peso'] > 200)))
]


print("Exemplos de casos absurdos de peso por faixa etária:")
print(casos_absurdos_peso[['id_paciente', 'idade', 'faixa_etaria', 'peso']].head(10))
print(f"\nTotal de casos absurdos de peso encontrados: {len(casos_absurdos_peso)}")


id_procurado = 'd5262a3c-e5d3-4195-a46b-0acd2533e1d6'

dados_paciente = df[df['id_paciente'] == id_procurado]
print(dados_paciente.T)

import seaborn as sns
import matplotlib.pyplot as plt

sns.histplot(df['peso'].dropna(), kde=True)
plt.title('Distribuição do Peso dos Pacientes')
plt.xlabel('Peso (kg)')
plt.ylabel('Frequência')
plt.show()

import pandas as pd

# Converte colunas para formato datetime
df['data_nascimento'] = pd.to_datetime(df['data_nascimento'], errors='coerce')
df['updated_at'] = pd.to_datetime(df['updated_at'], errors='coerce')

# Filtra dados com datas válidas antes do cálculo da idade
df_validas = df.dropna(subset=['data_nascimento', 'updated_at']).copy()

# Remove datas incorretas (registros de antes de 1900)
df_validas = df_validas[df_validas['updated_at'].dt.year > 1900]

# Calcula a idade corretamente usando apenas datas válidas
df_validas['idade'] = (df_validas['updated_at'] - df_validas['data_nascimento']).dt.days // 365

escolaridade_incoerente = [
    'Médio Completo', 'Médio Incompleto',
    'Fundamental Completo', 'Fundamental Incompleto',
    'Superior completo', 'Superior incompleto',
    'Alfabetizado'
]

# Verificar crianças menores de 3 anos frequentando escola com escolaridade incoerente
inconsistentes_idade_baixa = df_validas[
    (df_validas['frequenta_escola'] == 1) &
    (df_validas['idade'] < 3) &
    (df_validas['idade'] >= 0) &
    (df_validas['escolaridade'].isin(escolaridade_incoerente))
]

print("Casos com idade abaixo de 3 anos e escolaridade incoerente:")
print(inconsistentes_idade_baixa[['id_paciente', 'idade', 'frequenta_escola', 'escolaridade']])

num_inconsistencias = inconsistentes_idade_baixa.shape[0]
print(f"Total de inconsistências encontradas: {num_inconsistencias}")


# Pacientes com zero atendimentos primários e muitos atendimentos hospitalares
casos_sem_primaria = df[
    (df['n_atendimentos_atencao_primaria'] == 0) &
    (df['n_atendimentos_hospital'] > 30)
]

print("Pacientes com zero atendimentos primários e muitos atendimentos hospitalares:")
print(casos_sem_primaria[['id_paciente', 'n_atendimentos_hospital', 'n_atendimentos_atencao_primaria']])


# Verificando quantas ocupações únicas existem no campo 'ocupacao'
num_ocupacoes_unicas = df['ocupacao'].nunique()

print(f"Total de ocupações únicas encontradas: {num_ocupacoes_unicas}\n")

# Exibindo exemplos dessas ocupações para verificar inconsistências na grafia
exemplos_ocupacoes = df['ocupacao'].unique()[:20]
print("Exemplos de ocupações únicas encontradas:")
print(exemplos_ocupacoes)

ocupacoes_frequentes = df['ocupacao'].value_counts().head(10)
print(ocupacoes_frequentes)

# Verificando ocupações semelhantes
print(df[df['ocupacao'].str.contains('motorista', case=False, na=False)]['ocupacao'].value_counts())


# Verificar os valores únicos na coluna 'obito' e os tipos associados
valores_unicos_obito = df['obito'].unique()
print("Valores únicos encontrados em 'obito':", valores_unicos_obito)

# Contagem de cada valor
contagem_valores_obito = df['obito'].value_counts(dropna=False)
print("\nContagem de cada valor encontrado:")
print(contagem_valores_obito)

# Verificando os tipos de cada valor único
print("\nTipos dos valores únicos encontrados:")
for valor in valores_unicos_obito:
    print(f"Valor: {valor}, Tipo: {type(valor)}")


# Verificando valores únicos no campo 'luz_eletrica'
valores_unicos_luz = df['luz_eletrica'].unique()
print(f"Valores únicos encontrados em 'luz_eletrica': {valores_unicos_luz}")

# Contagem dos valores únicos
contagem_luz = df['luz_eletrica'].value_counts()
print("\nContagem de cada valor encontrado:")
print(contagem_luz)

print("\nTipos dos valores únicos encontrados:")
for valor in valores_unicos_luz:
    print(f"Valor: {valor}, Tipo: {type(valor)}")

# Mapeando valores
df['luz_eletrica_simplificado'] = df['luz_eletrica'].map({
    '1': 'Sim',
    'True': 'Sim',
    '0': 'Não',
    'False': 'Não'
})

# Contagem da recorrencia
contagem_luz = df['luz_eletrica_simplificado'].value_counts()

# Gráfico de pizza
contagem_luz.plot.pie(autopct='%1.1f%%', labels=contagem_luz.index)
plt.title('Proporção de domicílios com Luz Elétrica')
plt.ylabel('')
plt.show()


# Valores únicos no campo 'familia_beneficiaria_auxilio_brasil'
valores_unicos_auxilio = df['familia_beneficiaria_auxilio_brasil'].unique()
print(f"Valores únicos em 'familia_beneficiaria_auxilio_brasil': {valores_unicos_auxilio}")

# Contagem dos valores únicos
contagem_auxilio = df['familia_beneficiaria_auxilio_brasil'].value_counts()
print("\nContagem de cada valor encontrado:")
print(contagem_auxilio)

# Verificando tipos dos valores únicos
print("\nTipos dos valores únicos encontrados:")
for valor in valores_unicos_auxilio:
    print(f"Valor: {valor}, Tipo: {type(valor)}")

# Valores únicos em 'crianca_matriculada_creche_pre_escola'
valores_unicos_creche = df['crianca_matriculada_creche_pre_escola'].unique()
print(f"Valores únicos em 'crianca_matriculada_creche_pre_escola': {valores_unicos_creche}")

# Contagem dos valores únicos
contagem_creche = df['crianca_matriculada_creche_pre_escola'].value_counts()
print("\nContagem de cada valor encontrado:")
print(contagem_creche)

# Analisando tipos dos valores únicos
print("\nTipos dos valores únicos encontrados:")
for valor in valores_unicos_creche:
    print(f"Valor: {valor}, Tipo: {type(valor)}")